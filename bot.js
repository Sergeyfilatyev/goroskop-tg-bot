const { Telegraf } = require("telegraf");
require("dotenv").config();
const horoscopes = require("./horoscopes.json");

const bot = new Telegraf(process.env.BOT_TOKEN);
const ch1 = process.env.CH_1;
const ch2 = process.env.CH_2;
const ch3 = process.env.CH_3;
const link1 = process.env.LINK_1;
const link2 = process.env.LINK_2;
const link3 = process.env.LINK_3;

const userData = {};
const channelInfo = {
  [link1]: "–Ø –ª—é–±–ª—é",
  [link2]: "–Ø —Ö–æ—á—É",
  [link3]: "–ì–æ—Ä–æ—Å–∫–æ–ø | OK",
};
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.telegram.setMyCommands([
  { command: "/start", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ì–æ—Ä–æ—Å–∫–æ–ø" },
]);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
  const firstName = ctx.from.first_name || "–¥—Ä—É–≥";
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${firstName}!\n –≠—Ç–æ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è —Ç–µ–±—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, —á—Ç–æ–±—ã –ø—Ä–∏–æ—Ç–∫—Ä—ã—Ç—å –∑–∞–≤–µ—Å—É —Ç–≤–æ–µ–π —Å—É–¥—å–±—ã!üíö`
  );
  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
  return askForZodiac(ctx);
});

// –°–ª–æ–≤–∞—Ä—å –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ —Å —ç–º–æ–¥–∑–∏
const zodiacEmojis = {
  –û–≤–µ–Ω: "‚ôàÔ∏è",
  –¢–µ–ª–µ—Ü: "‚ôâÔ∏è",
  –ë–ª–∏–∑–Ω–µ—Ü—ã: "‚ôäÔ∏è",
  –†–∞–∫: "‚ôãÔ∏è",
  –õ–µ–≤: "‚ôåÔ∏è",
  –î–µ–≤–∞: "‚ôçÔ∏è",
  –í–µ—Å—ã: "‚ôéÔ∏è",
  –°–∫–æ—Ä–ø–∏–æ–Ω: "‚ôèÔ∏è",
  –°—Ç—Ä–µ–ª–µ—Ü: "‚ôêÔ∏è",
  –ö–æ–∑–µ—Ä–æ–≥: "‚ôëÔ∏è",
  –í–æ–¥–æ–ª–µ–π: "‚ôíÔ∏è",
  –†—ã–±—ã: "‚ôìÔ∏è",
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
function askForZodiac(ctx) {
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –≤ 3 —Ä—è–¥–∞
  const zodiacSigns = Object.keys(zodiacEmojis);
  const zodiacButtons = [];
  for (let i = 0; i < zodiacSigns.length; i += 4) {
    zodiacButtons.push(
      zodiacSigns.slice(i, i + 4).map((sign) => ({
        text: `${zodiacEmojis[sign]} ${sign}`,
        callback_data: `zodiac_${sign}`,
      }))
    );
  }

  ctx.reply("–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", {
    reply_markup: {
      inline_keyboard: zodiacButtons,
    },
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
bot.action(/zodiac_(.+)/, (ctx) => {
  const zodiacSign = ctx.match[1];
  const userId = ctx.from.id;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
  userData[userId] = { zodiacSign };

  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª
  ctx.answerCbQuery();
  ctx.reply("–¢—ã –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤–æ—á–∫–∞?", {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üë®", callback_data: "gender_male" },
          { text: "üë©", callback_data: "gender_female" },
        ],
        [{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "restart" }],
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
bot.action(/gender_(.+)/, (ctx) => {
  const gender = ctx.match[1];
  const userId = ctx.from.id;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª
  userData[userId].gender = gender;

  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
  ctx.answerCbQuery();
  ctx.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", {
    reply_markup: {
      keyboard: [[{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" }]],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
bot.on("text", (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text;

  if (text === "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
    return restartBot(ctx);
  }

  // –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω
  if (!userData[userId].age) {
    const age = parseInt(text);
    if (isNaN(age)) {
      ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.");
    } else if (age < 7) {
      ctx.reply(
        "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 7 –ª–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç."
      );
    } else {
      userData[userId].age = age;

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      ctx.reply("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è üñ§", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üåÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data: "option_today" }],
            [{ text: "üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –≥–æ–¥", callback_data: "option_year" }],
            [
              {
                text: "üíû –ó–Ω–∞–∫ —Å—É–¥—å–±—ã",
                callback_data: "option_destiny",
              },
            ],
            [{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "restart" }],
          ],
        },
      });
    }
  } else {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üåÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data: "option_today" }],
          [{ text: "üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –≥–æ–¥", callback_data: "option_year" }],
          [
            {
              text: "üíû –ó–Ω–∞–∫ —Å—É–¥—å–±—ã",
              callback_data: "option_destiny",
            },
          ],
          [{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "restart" }],
        ],
      },
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ü–∏–∏
bot.action(/option_(.+)/, async (ctx) => {
  const option = ctx.match[1];
  const userId = ctx.from.id;

  ctx.answerCbQuery();

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
  userData[userId].selectedOption = option;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  await ctx.reply("üîÆ –°–≤—è–∑—ã–≤–∞–µ–º—Å—è —Å–æ –∑–≤–µ–∑–¥–∞–º–∏...");
  await new Promise((resolve) => setTimeout(resolve, 1000));
  await ctx.reply("‚ú® –í—ã—á–∏—Å–ª—è–µ–º –≤–∞—à—É —Å—É–¥—å–±—É...");
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã

  await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø:",
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: `${channelInfo[link1]}`,
              url: `https://t.me/${link1.replace("@", "")}`,
            },
            {
              text: `${channelInfo[link2]}`,
              url: `https://t.me/${link2.replace("@", "")}`,
            },
            {
              text: `${channelInfo[link3]}`,
              url: `https://t.me/${link3.replace("@", "")}`,
            },
          ],
          [{ text: "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data: "subscribed" }],
          [{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "restart" }],
        ],
      },
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
bot.action("subscribed", async (ctx) => {
  ctx.answerCbQuery();
  const userId = ctx.from.id;
  const user = userData[userId];

  const requiredChannels = [ch1, ch2, ch3];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
  let notSubscribedChannels = [];

  for (const channel of requiredChannels) {
    try {
      const chatMember = await bot.telegram.getChatMember(channel, userId);
      if (chatMember.status === "left" || chatMember.status === "kicked") {
        notSubscribedChannels.push(channel);
      }
    } catch (error) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ${channel}:`, error);
      notSubscribedChannels.push(channel);
    }
  }

  if (notSubscribedChannels.length > 0) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    await ctx.reply(
      "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø.",
      {
        reply_markup: {
          inline_keyboard: [
            notSubscribedChannels.map((channel) => ({
              text: `${channelInfo[channel]}`,
              url: `https://t.me/${channel.replace("@", "")}`,
            })),
            [{ text: "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data: "subscribed" }],
            [{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "restart" }],
          ],
        },
      }
    );
  } else {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
    const { zodiacSign, gender, age, selectedOption } = user;
    const category = user.selectedOption.replace("option_", "");
    const zodiacMapping = {
      –û–≤–µ–Ω: "Aries",
      –¢–µ–ª–µ—Ü: "Taurus",
      –ë–ª–∏–∑–Ω–µ—Ü—ã: "Gemini",
      –†–∞–∫: "Cancer",
      –õ–µ–≤: "Leo",
      –î–µ–≤–∞: "Virgo",
      –í–µ—Å—ã: "Libra",
      –°–∫–æ—Ä–ø–∏–æ–Ω: "Scorpio",
      –°—Ç—Ä–µ–ª–µ—Ü: "Sagittarius",
      –ö–æ–∑–µ—Ä–æ–≥: "Capricorn",
      –í–æ–¥–æ–ª–µ–π: "Aquarius",
      –†—ã–±—ã: "Pisces",
    };
    const zodiacSignEnglish = zodiacMapping[zodiacSign];
    const horoscopesList = horoscopes[zodiacSignEnglish][gender][category];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (horoscopesList && horoscopesList.length > 0) {
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
      const horoscope =
        horoscopesList[Math.floor(Math.random() * horoscopesList.length)];

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
      await ctx.reply(
        `\n–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—èüß°\n\n‚ú®${horoscope}‚ú®\n `
      );
    } else {
      await ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–æ—Ä–æ—Å–∫–æ–ø—ã –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
    }
    const adminChatId = process.env.YOUR_CHAT_ID;
    if (zodiacSign && gender && age && selectedOption) {
      const userInfo = `–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
–ò–º—è: ${ctx.from.first_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ctx.from.username || "–ù–µ —É–∫–∞–∑–∞–Ω"}
ID: ${ctx.from.id}
–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ${zodiacSign}
–ü–æ–ª: ${gender === "male" ? "–ú—É–∂" : "–ñ–µ–Ω"}
–í–æ–∑—Ä–∞—Å—Ç: ${age}
–í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è: ${category}`;

      await bot.telegram.sendMessage(adminChatId, userInfo);
    } else {
      console.log(
        "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."
      );
    }
    await ctx.reply("–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "restart" }],
        ],
      },
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
bot.action("restart", (ctx) => {
  ctx.answerCbQuery();
  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  delete userData[ctx.from.id];
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
  ctx.reply("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...");
  return askForZodiac(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
bot.on("callback_query", (ctx) => {
  ctx.answerCbQuery("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start");
});

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
function restartBot(ctx) {
  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  delete userData[ctx.from.id];
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
  ctx.reply("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...");
  return askForZodiac(ctx);
}

bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
